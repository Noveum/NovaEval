#!/usr/bin/env python3
"""
Script to create a new dataset in Noveum API.
Creates a dataset with the specified name and type.
"""

import os
import json
import requests
import argparse
from dotenv import load_dotenv
from typing import Dict, Any, Optional

# Load environment variables
load_dotenv()

# Get API credentials from environment
api_key = os.getenv('NOVEUM_API_KEY')
org_slug = os.getenv('NOVEUM_ORG_SLUG')
dataset_slug = os.getenv('NOVEUM_DATASET_SLUG')
dataset_name = os.getenv('NOVEUM_DATASET_SLUG')

def validate_environment():
    """Validate that all required environment variables are set"""
    required_vars = {
        'NOVEUM_API_KEY': api_key,
        'NOVEUM_ORG_SLUG': org_slug,
        'NOVEUM_DATASET_SLUG': dataset_slug,
        'NOVEUM_DATASET_NAME': dataset_name
    }
    
    missing_vars = [var for var, value in required_vars.items() if not value]
    
    if missing_vars:
        print(f"Error: Missing required environment variables: {', '.join(missing_vars)}")
        print("Please set these variables in your .env file or environment")
        return False
    
    return True

def create_dataset(dataset_type: str, description: str = "", visibility: str = "org", environment: str = "") -> Optional[Dict[str, Any]]:
    """Create a new dataset in Noveum API"""
    
    # Construct API URL
    api_url = f"https://noveum.ai/api/v1/organizations/{org_slug}/datasets"
    
    # Prepare headers
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {api_key}',
        'Cookie': f'apiKeyCookie={api_key}'
    }
    
    # Prepare request data
    request_data = {
        "name": dataset_name,
        "slug": dataset_name,  # Will be auto-generated by the API
        "description": description,
        "visibility": visibility,
        "dataset_type": dataset_type,
        "environment": environment
    }
    
    print(f"Creating dataset at: {api_url}")
    print(f"Organization: {org_slug}")
    print(f"Dataset name: {dataset_name}")
    print(f"Dataset type: {dataset_type}")
    print(f"Description: {description}")
    print(f"Visibility: {visibility}")
    print(f"Environment: {environment}")
    
    try:
        response = requests.post(api_url, headers=headers, json=request_data, timeout=30)
        response.raise_for_status()
        
        data = response.json()
        print("Successfully created dataset")
        print(f"Response status: {response.status_code}")
        
        return data
        
    except requests.exceptions.RequestException as e:
        print(f"Error creating dataset: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"Response status: {e.response.status_code}")
            print(f"Response text: {e.response.text}")
        return None

def main():
    parser = argparse.ArgumentParser(description='Create a new dataset in Noveum API')
    parser.add_argument('dataset_type', type=str,
                       help='Type of the dataset (e.g., custom, evaluation, etc.)')
    parser.add_argument('--description', type=str, default="",
                       help='Description of the dataset (default: empty string)')
    parser.add_argument('--visibility', type=str, default="org",
                       help='Visibility of the dataset (default: org)')
    parser.add_argument('--environment', type=str, default="",
                       help='Environment for the dataset (default: empty string)')
    parser.add_argument('--pretty', action='store_true',
                       help='Pretty print the JSON response')
    parser.add_argument('--output', type=str, default="dataset_creation_response.json",
                       help='Output file to save the JSON response (default: dataset_creation_response.json)')
    
    args = parser.parse_args()
    
    # Print warning about dataset slug
    print("‚ö†Ô∏è  WARNING: Please update the dataset slug in your .env file after creating the dataset!")
    print("   The API will return a slug that you should set as NOVEUM_DATASET_SLUG in your .env file.")
    print()
    
    # Validate environment variables
    if not validate_environment():
        return 1
    
    # Create dataset
    data = create_dataset(
        dataset_type=args.dataset_type,
        description=args.description,
        visibility=args.visibility,
        environment=args.environment
    )
    
    if data is None:
        return 1
    
    # Save response to file
    try:
        with open(args.output, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2)
        print(f"\nResponse saved to: {args.output}")
    except (OSError, IOError) as e:
        print(f"Error saving response to file: {e}")
        return 1
    
    # Print the response
    if args.pretty:
        print("\nResponse data:")
        print(json.dumps(data, indent=2))
    else:
        print(f"\nResponse data: {json.dumps(data)}")
    
    # Extract and display the dataset slug if available
    if isinstance(data, dict) and 'slug' in data:
        print(f"\nüìù IMPORTANT: Update your .env file with:")
        print(f"   NOVEUM_DATASET_SLUG={data['slug']}")
    elif isinstance(data, dict) and 'data' in data and isinstance(data['data'], dict) and 'slug' in data['data']:
        print(f"\nüìù IMPORTANT: Update your .env file with:")
        print(f"   NOVEUM_DATASET_SLUG={data['data']['slug']}")
    
    return 0

if __name__ == "__main__":
    exit(main())
